openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: Fantastic Coffee (decaffeinated)
  description: Fantastic Coffee (decaffeinated), the skeleton project for Web and Software architecture course
  version: 1.0.0


paths:

  /login:
    post:
      summary: User Login
      description: Logs in a user by checking their existence or creating a new user if they don't exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while processing the login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feed:
    get:
      summary: Get Feed
      description: Retrieves the feed for a specific user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedRequest'
      responses:
        '200':
          description: Feed data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /profile:
    get:
      summary: Get Profile
      description: Retrieves the profile information of a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied due to ban
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /changeusername:
    put:
      summary: Change Username
      description: Updates the username for an existing user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUsernameRequest'
      responses:
        '200':
          description: Username changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeUsernameResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while processing the username change
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /banuser:
    post:
      summary: Ban or Unban a User
      description: Bans or unbans a user based on the provided IDs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanRequest'
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /getbans:
    get:
      summary: Retrieve Banned Users
      description: Retrieves a list of users banned by the given owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBansRequest'
      responses:
        '200':
          description: List of banned users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBansResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while retrieving the list of banned users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /db/{table}:
    get:
      summary: Get Database Table Content
      description: Retrieves the content of a specified database table.
      parameters:
        - name: table
          in: path
          required: true
          schema:
            type: string
          description: The name of the database table to retrieve.
      responses:
        '200':
          description: Table content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableContent'
        '400':
          description: Missing or invalid table name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while retrieving table content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /followuser:
    post:
      summary: Follow or Unfollow a User
      description: Toggles following status for a user based on the provided IDs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowRequest'
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getfollowed:
    get:
      summary: Retrieve Followed Users
      description: Retrieves a list of users followed by the given owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFollowedRequest'
      responses:
        '200':
          description: List of followed users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFollowedResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while retrieving the list of followed users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getfollowers:
    get:
      summary: Retrieve Followers
      description: Retrieves a list of users following the given owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFollowersRequest'
      responses:
        '200':
          description: List of followers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFollowersResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while retrieving the list of followers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        
  /createpost:
    post:
      summary: Create a Post
      description: Creates a new post with an associated image.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: Post created successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Post created"
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while processing the post creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /deletepost:
    delete:
      summary: Delete a Post
      description: Deletes a post based on the provided post ID and requester ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePostRequest'
      responses:
        '200':
          description: Post deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Post deleted"
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while deleting the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getuserposts:
    get:
      summary: Retrieve User Posts
      description: Retrieves all posts made by a specific user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserPostsRequest'
      responses:
        '200':
          description: User posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserPostsResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while retrieving user posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /likepost:
    post:
      summary: Like or Unlike a Post
      description: Toggles the like status for a given post and user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikePostRequest'
      responses:
        '200':
          description: Post like status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikePostResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while updating like status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getlikes:
    get:
      summary: Retrieve Likes for a Post
      description: Retrieves all users who liked a specific post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLikesRequest'
      responses:
        '200':
          description: Likes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLikesResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while retrieving likes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        
  /commentpost:
    post:
      summary: Add a Comment to a Post
      description: Adds a new comment to a specific post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPostRequest'
      responses:
        '200':
          description: Comment posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPostResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while posting comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /deletecomment:
    delete:
      summary: Delete a Comment
      description: Deletes a specific comment from a post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommentRequest'
      responses:
        '200':
          description: Comment deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Comment deleted"
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while deleting comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /getcomments:
    get:
      summary: Retrieve Comments for a Post
      description: Retrieves all comments for a specific post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCommentsRequest'
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsResponse'
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error while retrieving comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
      required:
        - username

    LoginResponse:
      type: object
      properties:
        msg:
          type: string
          example: "User logged in"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 123
            username:
              type: string
              example: "johndoe"

    FeedRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
      required:
        - username
    FeedResponse:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    
    ProfileRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
        ID:
          type: integer
          example: 123
      required:
        - username
        - ID
    ProfileResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Profile page retrieved"
        data:
          type: object
          properties:
            username:
              type: string
              example: "johndoe"
            followerCount:
              type: integer
              example: 150
            followedCount:
              type: integer
              example: 200
            posts:
              type: array
              items:
                $ref: '#/components/schemas/Post'
            postsCount:
              type: integer
              example: 25

    ChangeUsernameRequest:
      type: object
      properties:
        id:
          type: integer
          example: 123
        username:
          type: string
          example: "new_username"
      required:
        - id
        - username
    ChangeUsernameResponse:
      type: object
      properties:
        msg:
          type: string
          example: "Username changed"
        user:
          type: object
          properties:
            id:
              type: integer
              example: 123
            username:
              type: string
              example: "new_username"

    BanRequest:
      type: object
      properties:
        ownerID:
          type: integer
          example: 123
        prayID:
          type: integer
          example: 456
      required:
        - ownerID
        - prayID
    BanResponse:
      type: object
      properties:
        message:
          type: string
          example: "User banned!"

    GetBansRequest:
      type: object
      properties:
        ownerID:
          type: integer
          example: 123
      required:
        - ownerID
    GetBansResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Banned users retrieved"
        data:
          type: array
          items:
            type: object
            properties:
              userID:
                type: integer
                example: 456
    

    FollowRequest:
      type: object
      properties:
        ownerID:
          type: integer
          example: 123
        followedID:
          type: integer
          example: 456
      required:
        - ownerID
        - followedID
    FollowResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "User followed"
        data:
          type: object
          properties:
            ownerID:
              type: integer
              example: 123
            followedID:
              type: integer
              example: 456

    GetFollowedRequest:
      type: object
      properties:
        ownerID:
          type: integer
          example: 123
      required:
        - ownerID
    GetFollowedResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Followed users retrieved"
        Followed:
          type: array
          items:
            type: object
            properties:
              userID:
                type: integer
                example: 456

    GetFollowersRequest:
      type: object
      properties:
        ownerID:
          type: integer
          example: 123
      required:
        - ownerID

    GetFollowersResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Followers retrieved"
        Followers:
          type: array
          items:
            type: object
            properties:
              userID:
                type: integer
                example: 456

    CreatePostRequest:
      type: object
      properties:
        ownerID:
          type: string
          example: "123"
        file:
          type: string
          format: binary
          description: "The image file to upload"

    DeletePostRequest:
      type: object
      properties:
        postID:
          type: integer
          example: 456
        requesterID:
          type: integer
          example: 123
      required:
        - postID
        - requesterID
      
    GetUserPostsRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
      required:
        - username
    GetUserPostsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "User posts retrieved"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    
    LikePostRequest:
      type: object
      properties:
        postID:
          type: integer
          example: 123
        ownerID:
          type: integer
          example: 456
      required:
        - postID
        - ownerID
    LikePostResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Post liked"
        data:
          type: object
          properties:
            postID:
              type: integer
              example: 123
            ownerID:
              type: integer
              example: 456
    
    GetLikesRequest:
      type: object
      properties:
        postID:
          type: integer
          example: 123
      required:
        - postID
    GetLikesResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Likes retrieved successfully"
        data:
          type: array
          items:
            type: object
            properties:
              userID:
                type: integer
                example: 456

    CommentPostRequest:
      type: object
      properties:
        postID:
          type: integer
          example: 123
        ownerID:
          type: integer
          example: 456
        content:
          type: string
          example: "This is a comment."
    CommentPostResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Comment posted"
        data:
          $ref: '#/components/schemas/Comment'

    DeleteCommentRequest:
      type: object
      properties:
        commentID:
          type: integer
          example: 101
        requesterID:
          type: integer
          example: 789
        postID:
          type: integer
          example: 123
      required:
        - commentID
        - requesterID
        - postID

    GetCommentsRequest:
      type: object
      properties:
        postID:
          type: integer
          example: 123
      required:
        - postID
    GetCommentsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Comments retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    TableContent:
      type: array
      items:
        type: object
        description: A single row in the table, with key-value pairs for each column.
        additionalProperties:
          type: string

    Post:
      type: object
      properties:
        postID:
          type: integer
          example: 123
        ownerID:
          type: integer
          example: 456
        imagePath:
          type: string
          example: "/images-db/post1.jpg"
        postedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        likesCount:
          type: integer
          example: 150
        commentsCount:
          type: integer
          example: 20
        requesterID:
          type: integer
          example: 789

    Comment:
      type: object
      properties:
        commentID:
          type: integer
          example: 101
        content:
          type: string
          example: "This is a comment."
        postID:
          type: integer
          example: 123
        ownerID:
          type: integer
          example: 456
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        requesterID:
          type: integer
          example: 789

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error 400"
        message:
          type: string
          example: "Invalid request body"
        details:
          type: array
          items:
            type: string
            example: "Missing ID in request body"






























# paths:
#   /status:
#     parameters:
#       - $ref: "#/components/parameters/XAppBuild"
#       - $ref: "#/components/parameters/XAppVersion"
#       - $ref: "#/components/parameters/XAppLanguage"
#       - $ref: "#/components/parameters/XAppPlatform"
#     get:
#       tags: ["General"]
#       operationId: getStatusMessage
#       summary: Get status message for the user about issues / updates
#       description: |-
#         The response contains a status message meant for the user. It might
#         contains information about current technical issues, update messages
#         or general information.
#       responses:
#         "200":
#           description: Status message available
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/StatusInfo"
#         "400": { $ref: "#/components/responses/BadRequest" }
#         "500": { $ref: "#/components/responses/InternalServerError" }

#   /:
#     get:
#       tags: ["Group 1"]
#       operationId: index
#       summary: Get an index
#       description: |-
#         This is an example of an index API description
#       responses:
#         "200":
#           description: Successful
#         "400": { $ref: "#/components/responses/BadRequest" }
#         "500": { $ref: "#/components/responses/InternalServerError" }
#   /context:
#     parameters:
#       - $ref: "#/components/parameters/XAppBuild"
#       - $ref: "#/components/parameters/XAppVersion"
#       - $ref: "#/components/parameters/XAppLanguage"
#       - $ref: "#/components/parameters/XAppPlatform"
#     post:
#       tags: ["Group 1"]
#       operationId: getContext
#       summary: Another API example
#       description: |-
#         Example description 2
#       responses:
#         "200":
#           description: Request ok
#           headers:
#             X-Access-Token:
#               description: Access token for authenticated requests
#               schema: { type: string }
#         "500": { $ref: "#/components/responses/InternalServerError" }
#   /authenticated:
#     parameters:
#       - $ref: "#/components/parameters/XAppBuild"
#       - $ref: "#/components/parameters/XAppVersion"
#       - $ref: "#/components/parameters/XAppLanguage"
#       - $ref: "#/components/parameters/XAppPlatform"
#     get:
#       tags: ["Group 2"]
#       operationId: getAuthenticatedExample
#       summary: Get an endpoint with authentication
#       description: |-
#         Get an endpoint with auth
#       security:
#         - LegacyAuth: []
#         - AppToken: []
#       responses:
#         "200":
#           description: Logout successful
#         "500": { $ref: "#/components/responses/InternalServerError" }

#   /pictures/{cat}:
#     parameters:
#       - $ref: "#/components/parameters/XAppBuild"
#       - $ref: "#/components/parameters/XAppVersion"
#       - $ref: "#/components/parameters/XAppLanguage"
#       - $ref: "#/components/parameters/XAppPlatform"
#       - $ref: "#/components/parameters/cat"
#     get:
#       tags: ["Cat pictures"]
#       operationId: getCatFromPicture
#       summary: Example of a parameter in URL
#       description: |-
#         Example of a parameter in URL
#       security:
#         - LegacyAuth: []
#       responses:
#         "200":
#           description: Student picture found
#           content:
#             image/png:
#               schema:
#                 type: string
#                 format: binary
#               example: Picture binary file
#         "404":
#           description: Student picture not found
#         "500": { $ref: "#/components/responses/InternalServerError" }


#   /autofeeder/{cat}:
#     parameters:
#       - $ref: "#/components/parameters/XAppBuild"
#       - $ref: "#/components/parameters/XAppVersion"
#       - $ref: "#/components/parameters/XAppLanguage"
#       - $ref: "#/components/parameters/XAppPlatform"
#       - $ref: "#/components/parameters/cat"
#     put:
#       tags: ["Autofeeder"]
#       operationId: createCatAutofeeder
#       summary: Example of PUT operation
#       security:
#         - LegacyAuth: []
#       responses:
#         "200":
#           description: Auto feed enabled
#         "400": { $ref: "#/components/responses/BadRequest" }
#         "500": { $ref: "#/components/responses/InternalServerError" }
#     delete:
#       tags: ["Autofeeder"]
#       operationId: deleteCatAutofeeder
#       summary: Example of DELETE operation
#       security:
#         - LegacyAuth: []
#       responses:
#         "200":
#           description: Auto feed disabled
#         "400": { $ref: "#/components/responses/BadRequest" }
#         "500": { $ref: "#/components/responses/InternalServerError" }

#   /session/login:
#     parameters:
#       - $ref: "#/components/parameters/XAppBuild"
#       - $ref: "#/components/parameters/XAppVersion"
#       - $ref: "#/components/parameters/XAppLanguage"
#       - $ref: "#/components/parameters/XAppPlatform"
#     post:
#       tags: ["Session management"]
#       operationId: login
#       summary: Log-in into system
#       description: |-
#         Perform a log-in action using username and password credentials.
#         Returns a token which can be used in authenticated requests.
#       requestBody:
#         content:
#           application/x-www-form-urlencoded:
#             schema:
#               type: object
#               properties:
#                 userid:
#                   type: string
#                   pattern: '^[a-zA-Z0-9]+$'
#                   minLength: 3
#                   maxLength: 255
#                 password:
#                   type: string
#                   pattern: '^.*?$'
#                   minLength: 8
#                   maxLength: 255
#       responses:
#         "200":
#           description: Login successful
#           headers:
#             X-Access-Token:
#               description: Access token for authenticated requests
#               schema: { type: string }
#         "400": { $ref: "#/components/responses/BadRequest" }
#         "403":
#           description: Login failed
#           headers:
#             X-Message:
#               description: Error message
#               schema: { type: string }
#         "500": { $ref: "#/components/responses/InternalServerError" }


# components:
#   schemas:
#     StatusInfo:
#       title: Status Info
#       type: object
#       properties:
#         status:
#           type: string
#           enum:
#             - info
#             - warning
#             - critical
#             - ""
#         title: { type: string }
#         message: { type: string }
#         url: { type: string }

#   responses:
#     Unauthorized:
#       description: The access token is missing or it's expired
#     BadRequest:
#       description: The request was not compliant with the documentation (eg. missing fields, etc)
#     InternalServerError:
#       description: The server encountered an internal error. Further info in server logs

#   securitySchemes:
#     LegacyAuth:
#       type: apiKey
#       in: header
#       name: X-App-Token
#       description: |-
#         App session token value. This value is sent by the server in the login
#         and session refresh APIs.

#   parameters:
#     XAppVersion:
#       schema:
#         type: string
#         pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
#         minLength: 1
#         maxLength: 10
#       name: X-App-Version
#       in: header
#       required: true
#       description: App human readable version ("semantic version" format)
#       allowEmptyValue: false
#     XAppBuild:
#       schema: { type: integer }
#       name: X-App-Build
#       in: header
#       required: true
#       description: App build number
#       allowEmptyValue: false
#     XAppLanguage:
#       schema:
#         type: string
#         pattern: '^[a-z]{2}([-_][A-Z]{2})?$'
#         minLength: 2
#         maxLength: 5
#       name: X-App-Language
#       in: header
#       required: true
#       description: App language in ISO 639-1 format
#       allowEmptyValue: false
#     XAppPlatform:
#       schema:
#         type: string
#         enum: [ios, android]
#       name: X-App-Platform
#       in: header
#       required: true
#       description: App operating system / platform
#       allowEmptyValue: false
#     cat:
#       schema:
#         type: string
#         pattern: '^[a-zA-Z]+$'
#         minLength: 3
#         maxLength: 10
#       name: cat
#       in: path
#       required: true
#       description: Cat
#       allowEmptyValue: false
